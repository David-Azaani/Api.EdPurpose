// Using EfCore & SqlServer

Object-Relational Mapping 
Object-Relational Mapping (ORM) is a
technique that lets you query and manipulate data from a database using an object-oriented paradigm 

--------------------------------------------------------------------
 [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }

	One specifies an explicit Primary Key , the other specifies that it should be an identity field in that database (which depends on the provider).
    In a lot of cases, the Key will be an identity field.
	You can mark the non-key (non-id) properties as DB-generated properties by using the DatabaseGeneratedOption.Identity option. This specifies that the value of the property will be generated by the database on the INSERT statement. This Identity property cannot be updated.

Please note that the way the value of the Identity property will be generated by the database depends on the database provider. It can be identity, rowversion or GUID. SQL Server makes an identity column for an integer property.

if you wanted to specify a non identity primary key, you may use something like this

[Key, DatabaseGenerated(DatabaseGeneratedOption.None)]

-------------------------------------------------------------------
1-Nuget :
* Microsoft.EntityFrameworkCore
//Microsoft.EntityFrameworkCore.Sql
* Microsoft.EntityFrameworkCore.Sqlite

* Microsoft.EntityFrameworkCore.Tools   // for using migration!

2-Db context
  public class Dbcontext : DbContext
public Dbcontext(DbContextOptions<Dbcontext> options)
            : base(options)
        {
        // or here we  put ot option or program.cs
        }


3- definint our db sets and =null!



4- appsettingDevelopment :
,
  "ConnectionStrings": {
    "CityInfoDBConnectionString": "Data Source=CityInfo.db"
  }


on program cs :

5- builder.Services.AddDbContext<Dbcontext>(
    dbContextOptions => dbContextOptions.UseSqlite(
        builder.Configuration["ConnectionStrings:CityInfoDBConnectionString"]));

or on db context :
//protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    optionsBuilder.UseSqlite("connectionstring");
        //    base.OnConfiguring(optionsBuilder);
        //}
6 - add-migration initialDb
    update-db

7 - add dummy data

protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<City>()
                .HasData(
               new City("New York City")
               {
                   Id = 1,
                   Description = "The one with that big park."
               });
			    modelBuilder.Entity<Poi>()
             .HasData(
               new Poi("Central Park")
               {
                   Id = 1,
                   CityId = 1,
                   Description = "The most visited urban park in the United States."
               });
          }


// to add this data in this way use add-migration dataseed
// update-database

or we can use another way on flower shop!







* : __EFMigrationsHistory table : keep our migration History
* : dont set connection string on appsetings.json
 1# : put in on Environment Variable :  then rest vs ,regardless of the other app setings you proj vs reads that !



 Always Seprate Entity model from outer facing models (DTOS)